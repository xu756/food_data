# Generated by Django 4.2.11 on 2024-04-21 02:53

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcquisitionSamples',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('fdc_id_of_sample_food', models.IntegerField(verbose_name='样品食品FDC ID')),
                ('fdc_id_of_acquisition_food', models.IntegerField(verbose_name='采集食品FDC ID')),
            ],
            options={
                'verbose_name': '采集样品',
                'verbose_name_plural': '采集样品',
                'db_table': 'acquisition_samples',
            },
        ),
        migrations.CreateModel(
            name='AgriculturalSamples',
            fields=[
                ('fdc_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='FDC ID')),
                ('acquisition_date', models.DateField(verbose_name='采集日期')),
                ('market_class', models.TextField(verbose_name='市场类别')),
                ('treatment', models.TextField(verbose_name='处理方式')),
                ('state', models.TextField(verbose_name='州份')),
            ],
            options={
                'verbose_name': '农业样品',
                'verbose_name_plural': '农业样品',
                'db_table': 'agricultural_samples',
            },
        ),
        migrations.CreateModel(
            name='Food',
            fields=[
                ('fdc_id', models.IntegerField(primary_key=True, serialize=False)),
                ('data_type', models.TextField(verbose_name='数据类型')),
                ('description', models.TextField(verbose_name='食品描述')),
                ('food_category_id', models.IntegerField(verbose_name='食品类别ID')),
                ('publication_date', models.TextField(verbose_name='发布日期')),
            ],
            options={
                'verbose_name': '食品',
                'verbose_name_plural': '食品',
                'db_table': 'food',
            },
        ),
        migrations.CreateModel(
            name='FoodAttribute',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('fdc_id', models.IntegerField(verbose_name='FDC ID')),
                ('seq_num', models.IntegerField(verbose_name='序列号')),
                ('food_attribute_type_id', models.IntegerField(verbose_name='食品属性类型ID')),
                ('name', models.TextField(verbose_name='属性名称')),
                ('value', models.TextField(verbose_name='属性值')),
            ],
            options={
                'verbose_name': '食品属性',
                'verbose_name_plural': '食品属性',
                'db_table': 'food_attribute',
            },
        ),
        migrations.CreateModel(
            name='FoodAttributeType',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name='属性类型名称')),
                ('description', models.TextField(verbose_name='属性类型描述')),
            ],
            options={
                'verbose_name': '食品属性类型',
                'verbose_name_plural': '食品属性类型',
                'db_table': 'food_attribute_type',
            },
        ),
        migrations.CreateModel(
            name='FoodCalorieConversionFactor',
            fields=[
                ('food_nutrient_conversion_factor_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='食品营养素转换因子ID')),
                ('protein_value', models.FloatField(verbose_name='蛋白质值')),
                ('fat_value', models.FloatField(verbose_name='脂肪值')),
                ('carbohydrate_value', models.FloatField(verbose_name='碳水化合物值')),
            ],
            options={
                'verbose_name': '食品热量转换因子',
                'verbose_name_plural': '食品热量转换因子',
                'db_table': 'food_calorie_conversion_factor',
            },
        ),
        migrations.CreateModel(
            name='FoodComponent',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ID')),
                ('fdc_id', models.IntegerField(verbose_name='FDC ID')),
                ('name', models.TextField(verbose_name='组成成分名称')),
                ('pct_weight', models.FloatField(verbose_name='百分比重量')),
                ('is_refuse', models.BooleanField(verbose_name='是否为废物')),
                ('gram_weight', models.FloatField(verbose_name='克重')),
                ('data_points', models.IntegerField(verbose_name='数据点')),
                ('min_year_acqured', models.IntegerField(verbose_name='最小年份获取')),
            ],
            options={
                'verbose_name': '食品组成成分',
                'verbose_name_plural': '食品组成成分',
                'db_table': 'food_component',
            },
        ),
        migrations.CreateModel(
            name='FoodNutrient',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('fdc_id', models.IntegerField()),
                ('nutrient_id', models.IntegerField()),
                ('amount', models.FloatField()),
                ('data_points', models.IntegerField()),
                ('derivation_id', models.IntegerField()),
                ('min', models.FloatField()),
                ('max', models.FloatField()),
                ('median', models.FloatField()),
                ('footnote', models.TextField()),
                ('min_year_acquired', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='FoodNutrientConversionFactor',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('fdc_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='FoodPortion',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('fdc_id', models.IntegerField()),
                ('seq_num', models.IntegerField()),
                ('amount', models.FloatField()),
                ('measure_unit_id', models.IntegerField()),
                ('portion_description', models.TextField()),
                ('modifier', models.TextField()),
                ('gram_weight', models.FloatField()),
                ('data_points', models.IntegerField()),
                ('footnote', models.TextField()),
                ('min_year_acquired', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='FoodProteinConversionFactor',
            fields=[
                ('food_nutrient_conversion_factor_id', models.IntegerField(primary_key=True, serialize=False)),
                ('value', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='FoodUpdateLogEntry',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('description', models.TextField()),
                ('last_updated', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='FoundationFood',
            fields=[
                ('fdc_id', models.IntegerField(primary_key=True, serialize=False)),
                ('ndb_number', models.IntegerField()),
                ('footnote', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='InputFood',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('fdc_id', models.IntegerField()),
                ('fdc_of_input_food', models.IntegerField()),
                ('seq_num', models.IntegerField()),
                ('amount', models.IntegerField()),
                ('sr_code', models.TextField()),
                ('sr_description', models.TextField()),
                ('unit', models.TextField()),
                ('portion_code', models.TextField()),
                ('portion_description', models.TextField()),
                ('gram_weight', models.FloatField()),
                ('retention_code', models.TextField()),
                ('survey_flag', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='LabMethod',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('description', models.TextField()),
                ('technique', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='LabMethodCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lab_method_id', models.IntegerField()),
                ('code', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='LabMethodNutrient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lab_method_id', models.IntegerField()),
                ('nutrient_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='MarketAcquisition',
            fields=[
                ('fdc_id', models.IntegerField(primary_key=True, serialize=False)),
                ('brand_description', models.TextField()),
                ('expiration_date', models.DateField()),
                ('label_weight', models.TextField()),
                ('location', models.TextField()),
                ('acquisition_date', models.DateField()),
                ('sales_type', models.TextField()),
                ('sample_lot_nbr', models.TextField()),
                ('sell_by_date', models.DateField()),
                ('store_city', models.TextField()),
                ('store_name', models.TextField()),
                ('store_state', models.TextField()),
                ('upc_code', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='MeasureUnit',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Nutrient',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('unit_name', models.TextField()),
                ('nutrient_nbr', models.FloatField()),
                ('rank', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='SampleFood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fdc_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='SQLiteMaster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField()),
                ('name', models.TextField()),
                ('tbl_name', models.TextField()),
                ('rootpage', models.IntegerField()),
                ('sql', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='SubSampleFood',
            fields=[
                ('fdc_id', models.IntegerField(primary_key=True, serialize=False)),
                ('fdc_id_of_sample_food', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='SubSampleResult',
            fields=[
                ('food_nutrient_id', models.IntegerField(primary_key=True, serialize=False)),
                ('adjusted_amount', models.FloatField()),
                ('lab_method_id', models.IntegerField()),
                ('nutrient_name', models.TextField()),
            ],
        ),
    ]
